@page "/userop/edita/{id:int}"

@using static WebBlazorN7.Components.Dialog;

@inject Services.IUserService UserService
@inject Services.IRoleService RoleService
@inject Services.IClaimService ClaimService
@using WebBlazorN7.ViewModel;
@inject NavigationManager NavigationManager

<h3>Edição de Usuário</h3>

<EditForm Model="@usuario" OnValidSubmit="EditarUsuario">
	<DataAnnotationsValidator />
	<Blazorise.ValidationSummary />

	<div class="row mb-3">
		<div class="col-md-1">
			<label for="id" class="form-label">Id</label>
			<InputNumber Id="id" @bind-Value="@usuario.Id" class="form-control" disabled />
		</div>

		<div class="col-md-3">
			<label for="firstName" class="form-label">First Name</label>
			<InputText Id="firstName" @bind-Value="@usuario.FirstName" class="form-control" />
			<ValidationMessage For="@(()=> usuario.FirstName)" />
		</div>

		<div class="col-md-3">
			<label for="lastName" class="form-label">Last Name</label>
			<InputText Id="lastName" @bind-Value="@usuario.LastName" class="form-control" />
			<ValidationMessage For="@(()=> usuario.LastName)" />
		</div>

		<div class="col-md-2">
			<label for="itin" class="form-label">Itin</label>
			<InputText Id="itin" class="form-control" @bind-Value="usuario.ITIN" />
			<ValidationMessage For="@(() => usuario.ITIN)" />
		</div>

		<div class="col-md-6">
			<label for="email" class="form-label">Email address</label>
			<InputText Id="email" class="form-control" @bind-Value="usuario.Email" disabled />
			<ValidationMessage For="@(() => usuario.Email)" />
		</div>
	</div>

	<div class="row mb-3">
		<div class="col-md-6">
			<div class="accordion" id="accordionRole">
				<div class="accordion-item">
					<h2 class="accordion-header" id="headingOne">
						<button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
							Roles
						</button>
					</h2>
					<div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionRole">
						<div class="accordion-body">
							@if (roles == null)
							{
								<p><em>Loading...</em></p>
							}
							else
							{
								<table class="table table-striped align-middle table-bordered">
									<thead class="table-success">
										<tr>
											<th class="col-sm-1"></th>
											<th>ID</th>
											<th>Name</th>
										</tr>
									</thead>
									<tbody>
										@foreach (var role in roles.OrderBy(x => x.Id))
										{
											<tr>
												<td class="text-center">
													<InputCheckbox @bind-Value="@role.Selecao"></InputCheckbox>
												</td>
												<td>@role.Id</td>
												<td>@role.Name</td>
											</tr>
										}
									</tbody>

								</table>
							}
						</div>
					</div>
				</div>
			</div>
		</div>

		<div class="col-md-6">
			<div class="accordion" id="accordionClaim">
				<div class="accordion-item">
					<h2 class="accordion-header" id="headingOne">
						<button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="true" aria-controls="collapseTwo">
							Claims
						</button>
					</h2>
					<div id="collapseTwo" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionClaim">
						<div class="accordion-body">
							@if (claims == null)
							{
								<p><em>Loading...</em></p>
							}
							else
							{
								<table class="table table-striped align-middle table-bordered">
									<thead class="table-success">
										<tr>
											<th class="col-sm-1"></th>
											<th>Type</th>
											<th>Value</th>
										</tr>
									</thead>
									<tbody>
										@foreach (var claim in claims.OrderBy(x => x.Type))
										{
											<tr>
												<td class="text-center">
													<InputCheckbox @bind-Value="@claim.Selecao"></InputCheckbox>
												</td>
												<td>@claim.Type</td>
												<td>
													<InputText Id="value" @bind-Value="@claim.Value" class="form-control" />
												</td>
											</tr>
										}
									</tbody>

								</table>
							}
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<div class="row">
		<div class="col-md-4">
			<div class="form-group">
				<input type="submit" class="btn btn-primary" value="Salvar" />
				<input type="button" class="btn btn-danger" @onclick="@Cancel" value="Cancelar" />
			</div>
		</div>
	</div>
</EditForm>

@if (DialogIsOpen)
{
	<Dialog Caption="Alteração de Claim/Usuário"
		Message="@message"
		OnClose="@OnDialogClose"
		Type="@category">
	</Dialog>
}

@code {
	[Parameter]
	public int id { get; set; }

	private MarkupString message;
	private bool DialogIsOpen = false;
	private Category category;

	Usuario usuario = new Usuario();
	List<RoleViewModel> roles = new List<RoleViewModel>();
	List<ClaimViewModel> claims = new List<ClaimViewModel>();

	public List<string>? UsuarioRoles { get; set; }
	List<ClaimViewModel> UsuarioClaims = new List<ClaimViewModel>();

	protected override async Task OnInitializedAsync()
	{
		var retorno = await UserService.Get(id);
		usuario = retorno.Item1;

		var retornoUserRoles = await UserService.GetRoles(id);
		UsuarioRoles = retornoUserRoles.Item1;

		var retornoUserClaims = await UserService.GetClaims(id);
		UsuarioClaims = retornoUserClaims.Item1;

		var retornoRoles = await RoleService.Get();
		roles = retornoRoles.Item1;

		if (UsuarioRoles != null)
			roles.ForEach(x => x.Selecao = UsuarioRoles.Count(y => y.Equals(x.Name)) > 0);

		var retornoClaims = await ClaimService.Get();
		claims = retornoClaims.Item1;

		if (UsuarioClaims != null)
			claims.ForEach(x => { x.Selecao = UsuarioClaims.Count(y => y.Type.Equals(x.Type)) > 0; x.Value = UsuarioClaims.SingleOrDefault(y => y.Type.Equals(x.Type))?.Value; });
	}

	protected async Task EditarUsuario()
	{
		if (claims.Count(x => x.Selecao && string.IsNullOrEmpty(x.Value)) > 0)
		{
			OpenDialog((MarkupString)$"Não é possivel prosseguir com claim selecionada sem o Value.<br /> {string.Join("<br />", claims.Where(x => x.Selecao && string.IsNullOrEmpty(x.Value)).Select(x => $"Type: {x.Type}"))}", Category.Okay);
			return;
		}

		var retorno = await UserService.Put(usuario.Email, usuario);

		foreach (var role in roles)
		{
			if (role.Selecao && (UsuarioRoles == null || UsuarioRoles.Count(x => x.Equals(role.Name)).Equals(0)))
				await UserService.AddRole(usuario.Id, role.Id);

			if (!role.Selecao && UsuarioRoles != null && UsuarioRoles.Count(x => x.Equals(role.Name)).Equals(1))
				await UserService.DeleteRole(usuario.Id, role.Id);
		}

		foreach (var claim in claims)
		{
			if (claim.Selecao && (UsuarioClaims == null || UsuarioClaims.Count(x => x.Type.Equals(claim.Type)).Equals(0)))
				await UserService.AddClaim(usuario.Id, claim.Type, claim.Value);

			if (claim.Selecao && UsuarioClaims != null && UsuarioClaims.Count(x => x.Type.Equals(claim.Type)).Equals(1) && claim.Value != UsuarioClaims.Single(x => x.Type.Equals(claim.Type)).Value)
				await UserService.PutValueClaim(usuario.Id, claim.Type, claim.Value);

			if (!claim.Selecao && UsuarioClaims != null && UsuarioClaims.Count(x => x.Type.Equals(claim.Type)).Equals(1))
				await UserService.DeleteClaim(usuario.Id, claim.Type);
		}

		NavigationManager.NavigateTo("userop/lista");
	}

	void OpenDialog(MarkupString message, Category category)
	{
		this.DialogIsOpen = true;
		this.message = message;
		this.category = category;
	}

	void OnDialogClose(bool isOk)
	{
		DialogIsOpen = false;
	}

	void Cancel()
	{
		NavigationManager.NavigateTo("userop/lista");
	}
}
